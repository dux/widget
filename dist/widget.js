// Generated by CoffeeScript 2.4.1
var Widget;

Widget = function(name, object) {
  if (object.constructor === Object) {
    return Widget.register(name, object);
  } else if (!object) {
    return Widget.get(name);
  } else {
    return Widget.bind(name, object);
  }
};

Object.assign(Widget, {
  inst_id_name: 'widget_id',
  namespace: 'w',
  registered: {},
  count: 0,
  // overload with custom on register fuction
  on_register: function(name) {
    return console.log(`Widget ${name} registered`);
  },
  // #consent.w.toggle ...
  // w.get('#consent').activate()
  // w.get('#consent').set('foo','bar') -> set state and call @render()
  get: function(node) {
    if (typeof node === 'string') {
      if (node[0] === '#') {
        node.split('#', 2)[1];
      }
      node = document.getElementById(node);
    }
    if (!node) {
      return;
    }
    return this.bind(node);
  },
  // register widget, trigger once method, insert css if present
  register: function(name, widget) {
    var data;
    if (Widget.registered[name]) {
      return;
    }
    this.registered[name] = widget;
    if (widget.once) {
      widget.once();
      delete widget.once;
    }
    if (widget.css) {
      data = typeof widget.css === 'function' ? widget.css() : widget.css;
      document.head.innerHTML += `<style id="widget_${name}_css">${data}</style>`;
      delete widget.css;
    }
    // create custom HTML element
    return CustomElement.define(`${this.namespace}-${name}`, function(node, opts) {
      return Widget.bind(name, node, opts);
    });
  },
  // runtime apply registered widget to dom node
  bind: function(widget_name, dom_node, state) {
    var json, widget, widget_opts;
    if (typeof dom_node === 'string') {
      dom_node = document.getElementById(dom_node);
    }
    if (dom_node.classList.contains('mounted')) {
      return;
    }
    dom_node.classList.add('mounted');
    if (!dom_node.getAttribute('id')) {
      dom_node.setAttribute('id', `widget_${++this.count}`);
    }
    // return if widget is not defined
    widget_opts = this.registered[widget_name];
    if (!widget_opts) {
      return console.error(`Widget ${widget_name} is not registred`);
    }
    // define widget instance
    widget = {...widget_opts};
    // bind widget to node
    dom_node.widget = widget;
    // bind root to root
    widget.node = dom_node;
    widget.id = dom_node.id;
    widget.ref = `document.getElementById('${widget.node.id}').widget`;
    // set widget state, copy all date-attributes to state
    if (state) {
      if (state['data-json']) {
        widget.state = JSON.parse(state['data-json']);
      } else {
        widget.state = state;
      }
    } else {
      json = dom_node.getAttribute('data-json') || '{}';
      json = JSON.parse(json);
      widget.state = {...json, ...dom_node.dataset};
    }
    delete widget.state.json;
    // shortcut
    widget.attr || (widget.attr = function(name) {
      return this.node.getAttribute(name);
    });
    // create set method unless defined
    widget.set || (widget.set = function(name, value) {
      if (typeof name === 'string') {
        return this.state[name] = value;
      } else {
        return Object.assign(this.state, name);
      }
    });
    // set html to current node
    widget.html || (widget.html = function(data, root) {
      if (typeof data !== 'string') {
        data = data.join('');
      }
      data = data.replace(/\$\$\./g, widget.ref + '.');
      return (root || this.node).innerHTML = data;
    });
    // redefine render method to insert html to widget if return is a string
    widget.render || (widget.render = function() {
      return false;
    });
    widget.$$render = widget.render;
    widget.render = function() {
      var data;
      data = widget.$$render();
      if (typeof data === 'string') {
        return this.html(data);
      } else {
        return null;
      }
    };
    if (widget.init) {
      // init and render
      widget.init();
    }
    widget.render();
    // return widget instance
    return widget;
  },
  // is node a binded widget
  isWidget: function(node) {
    return !!node.widget;
  },
  // get dom node child nodes as a list of objects
  childNodes: function(root, node_name) {
    var i, list;
    list = [];
    i = 0;
    root.childNodes.forEach(function(node) {
      var a, j, len, o, ref;
      if (!node.attributes) {
        return;
      }
      if (node_name && node_name.toUpperCase() !== node.nodeName) {
        return;
      }
      o = {};
      o.HTML = node.innerHTML;
      o.NODE = node;
      o.ID = i++;
      ref = node.attributes;
      for (j = 0, len = ref.length; j < len; j++) {
        a = ref[j];
        o[a.name] = a.value;
      }
      return list.push(o);
    });
    return list;
  }
});

export default Widget;
